//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/_Others/Input System/InputPlay.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputPlay: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputPlay()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputPlay"",
    ""maps"": [
        {
            ""name"": ""Editing"",
            ""id"": ""2b99812d-a3ca-465b-94bd-982e02cbd8e4"",
            ""actions"": [
                {
                    ""name"": ""Alt"",
                    ""type"": ""Button"",
                    ""id"": ""e7e2ce09-4b46-4caf-9191-b67ca70dcfab"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""AltRelease"",
                    ""type"": ""Button"",
                    ""id"": ""8cc0ce22-5a59-443c-8566-e3a005c88f1c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=1)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Shift"",
                    ""type"": ""Button"",
                    ""id"": ""6a90a9b8-c3e5-4b6a-a552-a69f184fcf31"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ShiftRelease"",
                    ""type"": ""Button"",
                    ""id"": ""da51e07f-bb2d-4be9-8ff7-c189911e4a57"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=1)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Control"",
                    ""type"": ""Button"",
                    ""id"": ""0cd279de-15a7-43fa-b84e-06854a913bd9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ControlRelease"",
                    ""type"": ""Button"",
                    ""id"": ""c45e0a35-4236-4b11-902d-daf87c6ea37a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=1)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Tab"",
                    ""type"": ""Button"",
                    ""id"": ""6199f729-327b-42c4-8aa5-e925be8e6472"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Delete"",
                    ""type"": ""Button"",
                    ""id"": ""effa17a5-fb17-43b5-83bc-5eb6e8cd4e94"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""UpArrow"",
                    ""type"": ""Button"",
                    ""id"": ""d3efbe91-bd54-4761-813e-9266ed6d3c61"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DownArrow"",
                    ""type"": ""Button"",
                    ""id"": ""54431773-fb10-47fc-8544-c4d98e37d747"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LeftArrow"",
                    ""type"": ""Button"",
                    ""id"": ""43ed8ec9-9de4-4fb9-9491-2b4c64cfe2b9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RightArrow"",
                    ""type"": ""Button"",
                    ""id"": ""929c762d-e964-40af-9117-daa5d27f0008"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""QuickTool-1"",
                    ""type"": ""Button"",
                    ""id"": ""f07845cb-3808-4e4e-8823-f49e9daf2945"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Hold"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""QuickTool-2"",
                    ""type"": ""Button"",
                    ""id"": ""f7bf43e0-f640-4701-8cca-937608aa90ef"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""QuickTool-3"",
                    ""type"": ""Button"",
                    ""id"": ""08f5c283-4cdc-4742-8a2e-9d692c575734"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""QuickTool-4"",
                    ""type"": ""Button"",
                    ""id"": ""c05e636f-eb13-4f4d-849b-e0c77f503741"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""QuickTool-5"",
                    ""type"": ""Button"",
                    ""id"": ""596ac028-d028-4aff-b110-39dd99294809"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""A"",
                    ""type"": ""Button"",
                    ""id"": ""7c810d82-9dae-4552-90e8-14b09ab430bf"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""S"",
                    ""type"": ""Button"",
                    ""id"": ""b6ae90ba-bb19-4f8b-82b7-96e052d1417c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""C"",
                    ""type"": ""Button"",
                    ""id"": ""15f6bb97-6507-462c-8a3a-eb65d4b9a49f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""V"",
                    ""type"": ""Button"",
                    ""id"": ""c922e807-6fe8-4683-8658-3f25d7aeeb5f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Scroll"",
                    ""type"": ""Button"",
                    ""id"": ""c38e687c-be6e-46e0-9639-a2fd3db636e7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""e299799e-f140-4b99-878f-906ee2d85145"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Scroll"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""cb3bb4a7-15fc-4c36-8b5b-a88e8017a1c5"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Scroll"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""611a9dfc-af78-47e7-bb10-4f062fc98b28"",
                    ""path"": ""<Mouse>/scroll/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Scroll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""47079602-8f6c-4d72-8a95-a74e6f27e467"",
                    ""path"": ""<Mouse>/scroll/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Scroll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""f5ca0e38-f1e3-455b-961b-4de594717fd8"",
                    ""path"": ""<Keyboard>/alt"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Alt"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""728aab57-449f-4918-81e8-ff467ed3335d"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""S"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1a245a17-38e1-46a8-8281-9222386ff8d0"",
                    ""path"": ""<Keyboard>/5"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""QuickTool-5"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""743a96cb-36ff-49dd-9dea-a32e69eec095"",
                    ""path"": ""<Keyboard>/4"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""QuickTool-4"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9a7f57e6-0150-4637-abc8-50ebbaed8d72"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""QuickTool-3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f3ea98b2-9a62-471f-a730-4df231103a65"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""QuickTool-2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5e80dcbe-468d-4769-bcd9-67c24c4957c2"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""QuickTool-1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0406f5f1-2fb1-4728-a92b-1a9998a1c5d9"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""RightArrow"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0d65fe7a-0b7e-4b67-9d3a-2cdf05162b4d"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""LeftArrow"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""57393b15-c667-403f-944c-fdfc6d22f492"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""DownArrow"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""06762ef1-3cee-4b47-a799-cc6d5f633657"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""UpArrow"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""698682fb-a82f-4f3d-9799-63d2b262934a"",
                    ""path"": ""<Keyboard>/ctrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""ControlRelease"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""58fdf4c0-7ea4-4af2-b6fe-cdde42ca1575"",
                    ""path"": ""<Keyboard>/ctrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Control"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3941eb15-e08a-4b2c-87cf-0aebb8af10d4"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""ShiftRelease"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""55801f3d-9321-49fb-8343-b8a745b1645c"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Shift"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ca9873fd-48f4-42e7-81fb-58a83df16525"",
                    ""path"": ""<Keyboard>/alt"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""AltRelease"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d71e0fc2-c654-45a6-b5a8-357fca3a67ef"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""A"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a129a79b-273e-435a-ad26-596a157edd43"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""C"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d8c44a3b-d666-44b9-96bc-25e8e5e38ad7"",
                    ""path"": ""<Keyboard>/v"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""V"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9ddbc467-ed16-4a3a-913d-38b4cd5b6246"",
                    ""path"": ""<Keyboard>/delete"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Delete"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b71c49b1-ee5c-4466-a73e-7f5a7bec26de"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Tab"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Testing"",
            ""id"": ""18b644ad-f219-48f8-9e27-6a266083835c"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""6d064657-5225-4855-bf19-60bd5615ed9a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": []
        },
        {
            ""name"": ""Playing"",
            ""id"": ""15f931f2-c276-4d50-9ff2-2ffe5fa710e4"",
            ""actions"": [],
            ""bindings"": []
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""PC"",
            ""bindingGroup"": ""PC"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Editing
        m_Editing = asset.FindActionMap("Editing", throwIfNotFound: true);
        m_Editing_Alt = m_Editing.FindAction("Alt", throwIfNotFound: true);
        m_Editing_AltRelease = m_Editing.FindAction("AltRelease", throwIfNotFound: true);
        m_Editing_Shift = m_Editing.FindAction("Shift", throwIfNotFound: true);
        m_Editing_ShiftRelease = m_Editing.FindAction("ShiftRelease", throwIfNotFound: true);
        m_Editing_Control = m_Editing.FindAction("Control", throwIfNotFound: true);
        m_Editing_ControlRelease = m_Editing.FindAction("ControlRelease", throwIfNotFound: true);
        m_Editing_Tab = m_Editing.FindAction("Tab", throwIfNotFound: true);
        m_Editing_Delete = m_Editing.FindAction("Delete", throwIfNotFound: true);
        m_Editing_UpArrow = m_Editing.FindAction("UpArrow", throwIfNotFound: true);
        m_Editing_DownArrow = m_Editing.FindAction("DownArrow", throwIfNotFound: true);
        m_Editing_LeftArrow = m_Editing.FindAction("LeftArrow", throwIfNotFound: true);
        m_Editing_RightArrow = m_Editing.FindAction("RightArrow", throwIfNotFound: true);
        m_Editing_QuickTool1 = m_Editing.FindAction("QuickTool-1", throwIfNotFound: true);
        m_Editing_QuickTool2 = m_Editing.FindAction("QuickTool-2", throwIfNotFound: true);
        m_Editing_QuickTool3 = m_Editing.FindAction("QuickTool-3", throwIfNotFound: true);
        m_Editing_QuickTool4 = m_Editing.FindAction("QuickTool-4", throwIfNotFound: true);
        m_Editing_QuickTool5 = m_Editing.FindAction("QuickTool-5", throwIfNotFound: true);
        m_Editing_A = m_Editing.FindAction("A", throwIfNotFound: true);
        m_Editing_S = m_Editing.FindAction("S", throwIfNotFound: true);
        m_Editing_C = m_Editing.FindAction("C", throwIfNotFound: true);
        m_Editing_V = m_Editing.FindAction("V", throwIfNotFound: true);
        m_Editing_Scroll = m_Editing.FindAction("Scroll", throwIfNotFound: true);
        // Testing
        m_Testing = asset.FindActionMap("Testing", throwIfNotFound: true);
        m_Testing_Newaction = m_Testing.FindAction("New action", throwIfNotFound: true);
        // Playing
        m_Playing = asset.FindActionMap("Playing", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Editing
    private readonly InputActionMap m_Editing;
    private List<IEditingActions> m_EditingActionsCallbackInterfaces = new List<IEditingActions>();
    private readonly InputAction m_Editing_Alt;
    private readonly InputAction m_Editing_AltRelease;
    private readonly InputAction m_Editing_Shift;
    private readonly InputAction m_Editing_ShiftRelease;
    private readonly InputAction m_Editing_Control;
    private readonly InputAction m_Editing_ControlRelease;
    private readonly InputAction m_Editing_Tab;
    private readonly InputAction m_Editing_Delete;
    private readonly InputAction m_Editing_UpArrow;
    private readonly InputAction m_Editing_DownArrow;
    private readonly InputAction m_Editing_LeftArrow;
    private readonly InputAction m_Editing_RightArrow;
    private readonly InputAction m_Editing_QuickTool1;
    private readonly InputAction m_Editing_QuickTool2;
    private readonly InputAction m_Editing_QuickTool3;
    private readonly InputAction m_Editing_QuickTool4;
    private readonly InputAction m_Editing_QuickTool5;
    private readonly InputAction m_Editing_A;
    private readonly InputAction m_Editing_S;
    private readonly InputAction m_Editing_C;
    private readonly InputAction m_Editing_V;
    private readonly InputAction m_Editing_Scroll;
    public struct EditingActions
    {
        private @InputPlay m_Wrapper;
        public EditingActions(@InputPlay wrapper) { m_Wrapper = wrapper; }
        public InputAction @Alt => m_Wrapper.m_Editing_Alt;
        public InputAction @AltRelease => m_Wrapper.m_Editing_AltRelease;
        public InputAction @Shift => m_Wrapper.m_Editing_Shift;
        public InputAction @ShiftRelease => m_Wrapper.m_Editing_ShiftRelease;
        public InputAction @Control => m_Wrapper.m_Editing_Control;
        public InputAction @ControlRelease => m_Wrapper.m_Editing_ControlRelease;
        public InputAction @Tab => m_Wrapper.m_Editing_Tab;
        public InputAction @Delete => m_Wrapper.m_Editing_Delete;
        public InputAction @UpArrow => m_Wrapper.m_Editing_UpArrow;
        public InputAction @DownArrow => m_Wrapper.m_Editing_DownArrow;
        public InputAction @LeftArrow => m_Wrapper.m_Editing_LeftArrow;
        public InputAction @RightArrow => m_Wrapper.m_Editing_RightArrow;
        public InputAction @QuickTool1 => m_Wrapper.m_Editing_QuickTool1;
        public InputAction @QuickTool2 => m_Wrapper.m_Editing_QuickTool2;
        public InputAction @QuickTool3 => m_Wrapper.m_Editing_QuickTool3;
        public InputAction @QuickTool4 => m_Wrapper.m_Editing_QuickTool4;
        public InputAction @QuickTool5 => m_Wrapper.m_Editing_QuickTool5;
        public InputAction @A => m_Wrapper.m_Editing_A;
        public InputAction @S => m_Wrapper.m_Editing_S;
        public InputAction @C => m_Wrapper.m_Editing_C;
        public InputAction @V => m_Wrapper.m_Editing_V;
        public InputAction @Scroll => m_Wrapper.m_Editing_Scroll;
        public InputActionMap Get() { return m_Wrapper.m_Editing; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(EditingActions set) { return set.Get(); }
        public void AddCallbacks(IEditingActions instance)
        {
            if (instance == null || m_Wrapper.m_EditingActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_EditingActionsCallbackInterfaces.Add(instance);
            @Alt.started += instance.OnAlt;
            @Alt.performed += instance.OnAlt;
            @Alt.canceled += instance.OnAlt;
            @AltRelease.started += instance.OnAltRelease;
            @AltRelease.performed += instance.OnAltRelease;
            @AltRelease.canceled += instance.OnAltRelease;
            @Shift.started += instance.OnShift;
            @Shift.performed += instance.OnShift;
            @Shift.canceled += instance.OnShift;
            @ShiftRelease.started += instance.OnShiftRelease;
            @ShiftRelease.performed += instance.OnShiftRelease;
            @ShiftRelease.canceled += instance.OnShiftRelease;
            @Control.started += instance.OnControl;
            @Control.performed += instance.OnControl;
            @Control.canceled += instance.OnControl;
            @ControlRelease.started += instance.OnControlRelease;
            @ControlRelease.performed += instance.OnControlRelease;
            @ControlRelease.canceled += instance.OnControlRelease;
            @Tab.started += instance.OnTab;
            @Tab.performed += instance.OnTab;
            @Tab.canceled += instance.OnTab;
            @Delete.started += instance.OnDelete;
            @Delete.performed += instance.OnDelete;
            @Delete.canceled += instance.OnDelete;
            @UpArrow.started += instance.OnUpArrow;
            @UpArrow.performed += instance.OnUpArrow;
            @UpArrow.canceled += instance.OnUpArrow;
            @DownArrow.started += instance.OnDownArrow;
            @DownArrow.performed += instance.OnDownArrow;
            @DownArrow.canceled += instance.OnDownArrow;
            @LeftArrow.started += instance.OnLeftArrow;
            @LeftArrow.performed += instance.OnLeftArrow;
            @LeftArrow.canceled += instance.OnLeftArrow;
            @RightArrow.started += instance.OnRightArrow;
            @RightArrow.performed += instance.OnRightArrow;
            @RightArrow.canceled += instance.OnRightArrow;
            @QuickTool1.started += instance.OnQuickTool1;
            @QuickTool1.performed += instance.OnQuickTool1;
            @QuickTool1.canceled += instance.OnQuickTool1;
            @QuickTool2.started += instance.OnQuickTool2;
            @QuickTool2.performed += instance.OnQuickTool2;
            @QuickTool2.canceled += instance.OnQuickTool2;
            @QuickTool3.started += instance.OnQuickTool3;
            @QuickTool3.performed += instance.OnQuickTool3;
            @QuickTool3.canceled += instance.OnQuickTool3;
            @QuickTool4.started += instance.OnQuickTool4;
            @QuickTool4.performed += instance.OnQuickTool4;
            @QuickTool4.canceled += instance.OnQuickTool4;
            @QuickTool5.started += instance.OnQuickTool5;
            @QuickTool5.performed += instance.OnQuickTool5;
            @QuickTool5.canceled += instance.OnQuickTool5;
            @A.started += instance.OnA;
            @A.performed += instance.OnA;
            @A.canceled += instance.OnA;
            @S.started += instance.OnS;
            @S.performed += instance.OnS;
            @S.canceled += instance.OnS;
            @C.started += instance.OnC;
            @C.performed += instance.OnC;
            @C.canceled += instance.OnC;
            @V.started += instance.OnV;
            @V.performed += instance.OnV;
            @V.canceled += instance.OnV;
            @Scroll.started += instance.OnScroll;
            @Scroll.performed += instance.OnScroll;
            @Scroll.canceled += instance.OnScroll;
        }

        private void UnregisterCallbacks(IEditingActions instance)
        {
            @Alt.started -= instance.OnAlt;
            @Alt.performed -= instance.OnAlt;
            @Alt.canceled -= instance.OnAlt;
            @AltRelease.started -= instance.OnAltRelease;
            @AltRelease.performed -= instance.OnAltRelease;
            @AltRelease.canceled -= instance.OnAltRelease;
            @Shift.started -= instance.OnShift;
            @Shift.performed -= instance.OnShift;
            @Shift.canceled -= instance.OnShift;
            @ShiftRelease.started -= instance.OnShiftRelease;
            @ShiftRelease.performed -= instance.OnShiftRelease;
            @ShiftRelease.canceled -= instance.OnShiftRelease;
            @Control.started -= instance.OnControl;
            @Control.performed -= instance.OnControl;
            @Control.canceled -= instance.OnControl;
            @ControlRelease.started -= instance.OnControlRelease;
            @ControlRelease.performed -= instance.OnControlRelease;
            @ControlRelease.canceled -= instance.OnControlRelease;
            @Tab.started -= instance.OnTab;
            @Tab.performed -= instance.OnTab;
            @Tab.canceled -= instance.OnTab;
            @Delete.started -= instance.OnDelete;
            @Delete.performed -= instance.OnDelete;
            @Delete.canceled -= instance.OnDelete;
            @UpArrow.started -= instance.OnUpArrow;
            @UpArrow.performed -= instance.OnUpArrow;
            @UpArrow.canceled -= instance.OnUpArrow;
            @DownArrow.started -= instance.OnDownArrow;
            @DownArrow.performed -= instance.OnDownArrow;
            @DownArrow.canceled -= instance.OnDownArrow;
            @LeftArrow.started -= instance.OnLeftArrow;
            @LeftArrow.performed -= instance.OnLeftArrow;
            @LeftArrow.canceled -= instance.OnLeftArrow;
            @RightArrow.started -= instance.OnRightArrow;
            @RightArrow.performed -= instance.OnRightArrow;
            @RightArrow.canceled -= instance.OnRightArrow;
            @QuickTool1.started -= instance.OnQuickTool1;
            @QuickTool1.performed -= instance.OnQuickTool1;
            @QuickTool1.canceled -= instance.OnQuickTool1;
            @QuickTool2.started -= instance.OnQuickTool2;
            @QuickTool2.performed -= instance.OnQuickTool2;
            @QuickTool2.canceled -= instance.OnQuickTool2;
            @QuickTool3.started -= instance.OnQuickTool3;
            @QuickTool3.performed -= instance.OnQuickTool3;
            @QuickTool3.canceled -= instance.OnQuickTool3;
            @QuickTool4.started -= instance.OnQuickTool4;
            @QuickTool4.performed -= instance.OnQuickTool4;
            @QuickTool4.canceled -= instance.OnQuickTool4;
            @QuickTool5.started -= instance.OnQuickTool5;
            @QuickTool5.performed -= instance.OnQuickTool5;
            @QuickTool5.canceled -= instance.OnQuickTool5;
            @A.started -= instance.OnA;
            @A.performed -= instance.OnA;
            @A.canceled -= instance.OnA;
            @S.started -= instance.OnS;
            @S.performed -= instance.OnS;
            @S.canceled -= instance.OnS;
            @C.started -= instance.OnC;
            @C.performed -= instance.OnC;
            @C.canceled -= instance.OnC;
            @V.started -= instance.OnV;
            @V.performed -= instance.OnV;
            @V.canceled -= instance.OnV;
            @Scroll.started -= instance.OnScroll;
            @Scroll.performed -= instance.OnScroll;
            @Scroll.canceled -= instance.OnScroll;
        }

        public void RemoveCallbacks(IEditingActions instance)
        {
            if (m_Wrapper.m_EditingActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IEditingActions instance)
        {
            foreach (var item in m_Wrapper.m_EditingActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_EditingActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public EditingActions @Editing => new EditingActions(this);

    // Testing
    private readonly InputActionMap m_Testing;
    private List<ITestingActions> m_TestingActionsCallbackInterfaces = new List<ITestingActions>();
    private readonly InputAction m_Testing_Newaction;
    public struct TestingActions
    {
        private @InputPlay m_Wrapper;
        public TestingActions(@InputPlay wrapper) { m_Wrapper = wrapper; }
        public InputAction @Newaction => m_Wrapper.m_Testing_Newaction;
        public InputActionMap Get() { return m_Wrapper.m_Testing; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TestingActions set) { return set.Get(); }
        public void AddCallbacks(ITestingActions instance)
        {
            if (instance == null || m_Wrapper.m_TestingActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_TestingActionsCallbackInterfaces.Add(instance);
            @Newaction.started += instance.OnNewaction;
            @Newaction.performed += instance.OnNewaction;
            @Newaction.canceled += instance.OnNewaction;
        }

        private void UnregisterCallbacks(ITestingActions instance)
        {
            @Newaction.started -= instance.OnNewaction;
            @Newaction.performed -= instance.OnNewaction;
            @Newaction.canceled -= instance.OnNewaction;
        }

        public void RemoveCallbacks(ITestingActions instance)
        {
            if (m_Wrapper.m_TestingActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ITestingActions instance)
        {
            foreach (var item in m_Wrapper.m_TestingActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_TestingActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public TestingActions @Testing => new TestingActions(this);

    // Playing
    private readonly InputActionMap m_Playing;
    private List<IPlayingActions> m_PlayingActionsCallbackInterfaces = new List<IPlayingActions>();
    public struct PlayingActions
    {
        private @InputPlay m_Wrapper;
        public PlayingActions(@InputPlay wrapper) { m_Wrapper = wrapper; }
        public InputActionMap Get() { return m_Wrapper.m_Playing; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayingActions set) { return set.Get(); }
        public void AddCallbacks(IPlayingActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayingActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayingActionsCallbackInterfaces.Add(instance);
        }

        private void UnregisterCallbacks(IPlayingActions instance)
        {
        }

        public void RemoveCallbacks(IPlayingActions instance)
        {
            if (m_Wrapper.m_PlayingActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayingActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayingActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayingActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayingActions @Playing => new PlayingActions(this);
    private int m_PCSchemeIndex = -1;
    public InputControlScheme PCScheme
    {
        get
        {
            if (m_PCSchemeIndex == -1) m_PCSchemeIndex = asset.FindControlSchemeIndex("PC");
            return asset.controlSchemes[m_PCSchemeIndex];
        }
    }
    public interface IEditingActions
    {
        void OnAlt(InputAction.CallbackContext context);
        void OnAltRelease(InputAction.CallbackContext context);
        void OnShift(InputAction.CallbackContext context);
        void OnShiftRelease(InputAction.CallbackContext context);
        void OnControl(InputAction.CallbackContext context);
        void OnControlRelease(InputAction.CallbackContext context);
        void OnTab(InputAction.CallbackContext context);
        void OnDelete(InputAction.CallbackContext context);
        void OnUpArrow(InputAction.CallbackContext context);
        void OnDownArrow(InputAction.CallbackContext context);
        void OnLeftArrow(InputAction.CallbackContext context);
        void OnRightArrow(InputAction.CallbackContext context);
        void OnQuickTool1(InputAction.CallbackContext context);
        void OnQuickTool2(InputAction.CallbackContext context);
        void OnQuickTool3(InputAction.CallbackContext context);
        void OnQuickTool4(InputAction.CallbackContext context);
        void OnQuickTool5(InputAction.CallbackContext context);
        void OnA(InputAction.CallbackContext context);
        void OnS(InputAction.CallbackContext context);
        void OnC(InputAction.CallbackContext context);
        void OnV(InputAction.CallbackContext context);
        void OnScroll(InputAction.CallbackContext context);
    }
    public interface ITestingActions
    {
        void OnNewaction(InputAction.CallbackContext context);
    }
    public interface IPlayingActions
    {
    }
}
