//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/_Others/Input System/InputPlay.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputPlay: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputPlay()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputPlay"",
    ""maps"": [
        {
            ""name"": ""Editing"",
            ""id"": ""2b99812d-a3ca-465b-94bd-982e02cbd8e4"",
            ""actions"": [
                {
                    ""name"": ""Alt"",
                    ""type"": ""Button"",
                    ""id"": ""e7e2ce09-4b46-4caf-9191-b67ca70dcfab"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""AltRelease"",
                    ""type"": ""Button"",
                    ""id"": ""8cc0ce22-5a59-443c-8566-e3a005c88f1c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=1)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Shift"",
                    ""type"": ""Button"",
                    ""id"": ""6a90a9b8-c3e5-4b6a-a552-a69f184fcf31"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ShiftRelease"",
                    ""type"": ""Button"",
                    ""id"": ""da51e07f-bb2d-4be9-8ff7-c189911e4a57"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=1)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Control"",
                    ""type"": ""Button"",
                    ""id"": ""0cd279de-15a7-43fa-b84e-06854a913bd9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ControlRelease"",
                    ""type"": ""Button"",
                    ""id"": ""c45e0a35-4236-4b11-902d-daf87c6ea37a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=1)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""UpArrow"",
                    ""type"": ""Button"",
                    ""id"": ""d3efbe91-bd54-4761-813e-9266ed6d3c61"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DownArrow"",
                    ""type"": ""Button"",
                    ""id"": ""54431773-fb10-47fc-8544-c4d98e37d747"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LeftArrow"",
                    ""type"": ""Button"",
                    ""id"": ""43ed8ec9-9de4-4fb9-9491-2b4c64cfe2b9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RightArrow"",
                    ""type"": ""Button"",
                    ""id"": ""929c762d-e964-40af-9117-daa5d27f0008"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""QuickTool-1"",
                    ""type"": ""Button"",
                    ""id"": ""f07845cb-3808-4e4e-8823-f49e9daf2945"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""QuickTool-2"",
                    ""type"": ""Button"",
                    ""id"": ""f7bf43e0-f640-4701-8cca-937608aa90ef"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""QuickTool-3"",
                    ""type"": ""Button"",
                    ""id"": ""08f5c283-4cdc-4742-8a2e-9d692c575734"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""QuickTool-4"",
                    ""type"": ""Button"",
                    ""id"": ""c05e636f-eb13-4f4d-849b-e0c77f503741"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""QuickTool-5"",
                    ""type"": ""Button"",
                    ""id"": ""596ac028-d028-4aff-b110-39dd99294809"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""7e87be1f-ec21-45ab-99a8-a452422933c3"",
                    ""path"": ""<Keyboard>/alt"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Alt"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""98330173-e10e-47b8-a205-7212a7aeee1a"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Shift"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""02a61f5d-3154-45d7-b3e0-2e98a6511bea"",
                    ""path"": ""<Keyboard>/ctrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Control"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""225aa1ca-996e-45fe-a0ac-49883301237b"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""UpArrow"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""68856cca-a2ad-4c47-88c7-beef2ddcacbd"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""DownArrow"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bc2ddbb1-c485-485b-aee7-b0a7b3068253"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""LeftArrow"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""733679d6-58dd-4b6b-9ed2-65a514a338ba"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""RightArrow"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2f1a3d83-f728-4f8f-8c25-5576048acf92"",
                    ""path"": ""<Keyboard>/alt"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""AltRelease"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""441dd6a9-8055-442b-9d14-17c8a0eeca0e"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""ShiftRelease"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0e97140f-4087-49ce-b0da-fb02622efa3e"",
                    ""path"": ""<Keyboard>/ctrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""ControlRelease"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7e79749c-90d2-4297-adf6-b6cc3723914e"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""QuickTool-1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7507a930-6e61-4c64-84b7-3aa7d89429e6"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""QuickTool-2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""15934095-8299-45ac-b7b8-8acadbd39136"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""QuickTool-3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cf49f6e9-fe26-4374-a70d-c6b58ecadaf6"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""QuickTool-4"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f1b0147c-fb23-450b-8984-4d51842e5f41"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""QuickTool-5"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Testing"",
            ""id"": ""18b644ad-f219-48f8-9e27-6a266083835c"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""6d064657-5225-4855-bf19-60bd5615ed9a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""473ddc26-7491-4198-8e94-913be3cb7c20"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Playing"",
            ""id"": ""15f931f2-c276-4d50-9ff2-2ffe5fa710e4"",
            ""actions"": [],
            ""bindings"": []
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard"",
            ""bindingGroup"": ""Keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Editing
        m_Editing = asset.FindActionMap("Editing", throwIfNotFound: true);
        m_Editing_Alt = m_Editing.FindAction("Alt", throwIfNotFound: true);
        m_Editing_AltRelease = m_Editing.FindAction("AltRelease", throwIfNotFound: true);
        m_Editing_Shift = m_Editing.FindAction("Shift", throwIfNotFound: true);
        m_Editing_ShiftRelease = m_Editing.FindAction("ShiftRelease", throwIfNotFound: true);
        m_Editing_Control = m_Editing.FindAction("Control", throwIfNotFound: true);
        m_Editing_ControlRelease = m_Editing.FindAction("ControlRelease", throwIfNotFound: true);
        m_Editing_UpArrow = m_Editing.FindAction("UpArrow", throwIfNotFound: true);
        m_Editing_DownArrow = m_Editing.FindAction("DownArrow", throwIfNotFound: true);
        m_Editing_LeftArrow = m_Editing.FindAction("LeftArrow", throwIfNotFound: true);
        m_Editing_RightArrow = m_Editing.FindAction("RightArrow", throwIfNotFound: true);
        m_Editing_QuickTool1 = m_Editing.FindAction("QuickTool-1", throwIfNotFound: true);
        m_Editing_QuickTool2 = m_Editing.FindAction("QuickTool-2", throwIfNotFound: true);
        m_Editing_QuickTool3 = m_Editing.FindAction("QuickTool-3", throwIfNotFound: true);
        m_Editing_QuickTool4 = m_Editing.FindAction("QuickTool-4", throwIfNotFound: true);
        m_Editing_QuickTool5 = m_Editing.FindAction("QuickTool-5", throwIfNotFound: true);
        // Testing
        m_Testing = asset.FindActionMap("Testing", throwIfNotFound: true);
        m_Testing_Newaction = m_Testing.FindAction("New action", throwIfNotFound: true);
        // Playing
        m_Playing = asset.FindActionMap("Playing", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Editing
    private readonly InputActionMap m_Editing;
    private List<IEditingActions> m_EditingActionsCallbackInterfaces = new List<IEditingActions>();
    private readonly InputAction m_Editing_Alt;
    private readonly InputAction m_Editing_AltRelease;
    private readonly InputAction m_Editing_Shift;
    private readonly InputAction m_Editing_ShiftRelease;
    private readonly InputAction m_Editing_Control;
    private readonly InputAction m_Editing_ControlRelease;
    private readonly InputAction m_Editing_UpArrow;
    private readonly InputAction m_Editing_DownArrow;
    private readonly InputAction m_Editing_LeftArrow;
    private readonly InputAction m_Editing_RightArrow;
    private readonly InputAction m_Editing_QuickTool1;
    private readonly InputAction m_Editing_QuickTool2;
    private readonly InputAction m_Editing_QuickTool3;
    private readonly InputAction m_Editing_QuickTool4;
    private readonly InputAction m_Editing_QuickTool5;
    public struct EditingActions
    {
        private @InputPlay m_Wrapper;
        public EditingActions(@InputPlay wrapper) { m_Wrapper = wrapper; }
        public InputAction @Alt => m_Wrapper.m_Editing_Alt;
        public InputAction @AltRelease => m_Wrapper.m_Editing_AltRelease;
        public InputAction @Shift => m_Wrapper.m_Editing_Shift;
        public InputAction @ShiftRelease => m_Wrapper.m_Editing_ShiftRelease;
        public InputAction @Control => m_Wrapper.m_Editing_Control;
        public InputAction @ControlRelease => m_Wrapper.m_Editing_ControlRelease;
        public InputAction @UpArrow => m_Wrapper.m_Editing_UpArrow;
        public InputAction @DownArrow => m_Wrapper.m_Editing_DownArrow;
        public InputAction @LeftArrow => m_Wrapper.m_Editing_LeftArrow;
        public InputAction @RightArrow => m_Wrapper.m_Editing_RightArrow;
        public InputAction @QuickTool1 => m_Wrapper.m_Editing_QuickTool1;
        public InputAction @QuickTool2 => m_Wrapper.m_Editing_QuickTool2;
        public InputAction @QuickTool3 => m_Wrapper.m_Editing_QuickTool3;
        public InputAction @QuickTool4 => m_Wrapper.m_Editing_QuickTool4;
        public InputAction @QuickTool5 => m_Wrapper.m_Editing_QuickTool5;
        public InputActionMap Get() { return m_Wrapper.m_Editing; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(EditingActions set) { return set.Get(); }
        public void AddCallbacks(IEditingActions instance)
        {
            if (instance == null || m_Wrapper.m_EditingActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_EditingActionsCallbackInterfaces.Add(instance);
            @Alt.started += instance.OnAlt;
            @Alt.performed += instance.OnAlt;
            @Alt.canceled += instance.OnAlt;
            @AltRelease.started += instance.OnAltRelease;
            @AltRelease.performed += instance.OnAltRelease;
            @AltRelease.canceled += instance.OnAltRelease;
            @Shift.started += instance.OnShift;
            @Shift.performed += instance.OnShift;
            @Shift.canceled += instance.OnShift;
            @ShiftRelease.started += instance.OnShiftRelease;
            @ShiftRelease.performed += instance.OnShiftRelease;
            @ShiftRelease.canceled += instance.OnShiftRelease;
            @Control.started += instance.OnControl;
            @Control.performed += instance.OnControl;
            @Control.canceled += instance.OnControl;
            @ControlRelease.started += instance.OnControlRelease;
            @ControlRelease.performed += instance.OnControlRelease;
            @ControlRelease.canceled += instance.OnControlRelease;
            @UpArrow.started += instance.OnUpArrow;
            @UpArrow.performed += instance.OnUpArrow;
            @UpArrow.canceled += instance.OnUpArrow;
            @DownArrow.started += instance.OnDownArrow;
            @DownArrow.performed += instance.OnDownArrow;
            @DownArrow.canceled += instance.OnDownArrow;
            @LeftArrow.started += instance.OnLeftArrow;
            @LeftArrow.performed += instance.OnLeftArrow;
            @LeftArrow.canceled += instance.OnLeftArrow;
            @RightArrow.started += instance.OnRightArrow;
            @RightArrow.performed += instance.OnRightArrow;
            @RightArrow.canceled += instance.OnRightArrow;
            @QuickTool1.started += instance.OnQuickTool1;
            @QuickTool1.performed += instance.OnQuickTool1;
            @QuickTool1.canceled += instance.OnQuickTool1;
            @QuickTool2.started += instance.OnQuickTool2;
            @QuickTool2.performed += instance.OnQuickTool2;
            @QuickTool2.canceled += instance.OnQuickTool2;
            @QuickTool3.started += instance.OnQuickTool3;
            @QuickTool3.performed += instance.OnQuickTool3;
            @QuickTool3.canceled += instance.OnQuickTool3;
            @QuickTool4.started += instance.OnQuickTool4;
            @QuickTool4.performed += instance.OnQuickTool4;
            @QuickTool4.canceled += instance.OnQuickTool4;
            @QuickTool5.started += instance.OnQuickTool5;
            @QuickTool5.performed += instance.OnQuickTool5;
            @QuickTool5.canceled += instance.OnQuickTool5;
        }

        private void UnregisterCallbacks(IEditingActions instance)
        {
            @Alt.started -= instance.OnAlt;
            @Alt.performed -= instance.OnAlt;
            @Alt.canceled -= instance.OnAlt;
            @AltRelease.started -= instance.OnAltRelease;
            @AltRelease.performed -= instance.OnAltRelease;
            @AltRelease.canceled -= instance.OnAltRelease;
            @Shift.started -= instance.OnShift;
            @Shift.performed -= instance.OnShift;
            @Shift.canceled -= instance.OnShift;
            @ShiftRelease.started -= instance.OnShiftRelease;
            @ShiftRelease.performed -= instance.OnShiftRelease;
            @ShiftRelease.canceled -= instance.OnShiftRelease;
            @Control.started -= instance.OnControl;
            @Control.performed -= instance.OnControl;
            @Control.canceled -= instance.OnControl;
            @ControlRelease.started -= instance.OnControlRelease;
            @ControlRelease.performed -= instance.OnControlRelease;
            @ControlRelease.canceled -= instance.OnControlRelease;
            @UpArrow.started -= instance.OnUpArrow;
            @UpArrow.performed -= instance.OnUpArrow;
            @UpArrow.canceled -= instance.OnUpArrow;
            @DownArrow.started -= instance.OnDownArrow;
            @DownArrow.performed -= instance.OnDownArrow;
            @DownArrow.canceled -= instance.OnDownArrow;
            @LeftArrow.started -= instance.OnLeftArrow;
            @LeftArrow.performed -= instance.OnLeftArrow;
            @LeftArrow.canceled -= instance.OnLeftArrow;
            @RightArrow.started -= instance.OnRightArrow;
            @RightArrow.performed -= instance.OnRightArrow;
            @RightArrow.canceled -= instance.OnRightArrow;
            @QuickTool1.started -= instance.OnQuickTool1;
            @QuickTool1.performed -= instance.OnQuickTool1;
            @QuickTool1.canceled -= instance.OnQuickTool1;
            @QuickTool2.started -= instance.OnQuickTool2;
            @QuickTool2.performed -= instance.OnQuickTool2;
            @QuickTool2.canceled -= instance.OnQuickTool2;
            @QuickTool3.started -= instance.OnQuickTool3;
            @QuickTool3.performed -= instance.OnQuickTool3;
            @QuickTool3.canceled -= instance.OnQuickTool3;
            @QuickTool4.started -= instance.OnQuickTool4;
            @QuickTool4.performed -= instance.OnQuickTool4;
            @QuickTool4.canceled -= instance.OnQuickTool4;
            @QuickTool5.started -= instance.OnQuickTool5;
            @QuickTool5.performed -= instance.OnQuickTool5;
            @QuickTool5.canceled -= instance.OnQuickTool5;
        }

        public void RemoveCallbacks(IEditingActions instance)
        {
            if (m_Wrapper.m_EditingActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IEditingActions instance)
        {
            foreach (var item in m_Wrapper.m_EditingActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_EditingActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public EditingActions @Editing => new EditingActions(this);

    // Testing
    private readonly InputActionMap m_Testing;
    private List<ITestingActions> m_TestingActionsCallbackInterfaces = new List<ITestingActions>();
    private readonly InputAction m_Testing_Newaction;
    public struct TestingActions
    {
        private @InputPlay m_Wrapper;
        public TestingActions(@InputPlay wrapper) { m_Wrapper = wrapper; }
        public InputAction @Newaction => m_Wrapper.m_Testing_Newaction;
        public InputActionMap Get() { return m_Wrapper.m_Testing; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TestingActions set) { return set.Get(); }
        public void AddCallbacks(ITestingActions instance)
        {
            if (instance == null || m_Wrapper.m_TestingActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_TestingActionsCallbackInterfaces.Add(instance);
            @Newaction.started += instance.OnNewaction;
            @Newaction.performed += instance.OnNewaction;
            @Newaction.canceled += instance.OnNewaction;
        }

        private void UnregisterCallbacks(ITestingActions instance)
        {
            @Newaction.started -= instance.OnNewaction;
            @Newaction.performed -= instance.OnNewaction;
            @Newaction.canceled -= instance.OnNewaction;
        }

        public void RemoveCallbacks(ITestingActions instance)
        {
            if (m_Wrapper.m_TestingActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ITestingActions instance)
        {
            foreach (var item in m_Wrapper.m_TestingActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_TestingActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public TestingActions @Testing => new TestingActions(this);

    // Playing
    private readonly InputActionMap m_Playing;
    private List<IPlayingActions> m_PlayingActionsCallbackInterfaces = new List<IPlayingActions>();
    public struct PlayingActions
    {
        private @InputPlay m_Wrapper;
        public PlayingActions(@InputPlay wrapper) { m_Wrapper = wrapper; }
        public InputActionMap Get() { return m_Wrapper.m_Playing; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayingActions set) { return set.Get(); }
        public void AddCallbacks(IPlayingActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayingActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayingActionsCallbackInterfaces.Add(instance);
        }

        private void UnregisterCallbacks(IPlayingActions instance)
        {
        }

        public void RemoveCallbacks(IPlayingActions instance)
        {
            if (m_Wrapper.m_PlayingActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayingActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayingActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayingActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayingActions @Playing => new PlayingActions(this);
    private int m_KeyboardSchemeIndex = -1;
    public InputControlScheme KeyboardScheme
    {
        get
        {
            if (m_KeyboardSchemeIndex == -1) m_KeyboardSchemeIndex = asset.FindControlSchemeIndex("Keyboard");
            return asset.controlSchemes[m_KeyboardSchemeIndex];
        }
    }
    public interface IEditingActions
    {
        void OnAlt(InputAction.CallbackContext context);
        void OnAltRelease(InputAction.CallbackContext context);
        void OnShift(InputAction.CallbackContext context);
        void OnShiftRelease(InputAction.CallbackContext context);
        void OnControl(InputAction.CallbackContext context);
        void OnControlRelease(InputAction.CallbackContext context);
        void OnUpArrow(InputAction.CallbackContext context);
        void OnDownArrow(InputAction.CallbackContext context);
        void OnLeftArrow(InputAction.CallbackContext context);
        void OnRightArrow(InputAction.CallbackContext context);
        void OnQuickTool1(InputAction.CallbackContext context);
        void OnQuickTool2(InputAction.CallbackContext context);
        void OnQuickTool3(InputAction.CallbackContext context);
        void OnQuickTool4(InputAction.CallbackContext context);
        void OnQuickTool5(InputAction.CallbackContext context);
    }
    public interface ITestingActions
    {
        void OnNewaction(InputAction.CallbackContext context);
    }
    public interface IPlayingActions
    {
    }
}
