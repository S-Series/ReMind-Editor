//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/PlayerInputSystem.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputSystem : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputSystem()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputSystem"",
    ""maps"": [
        {
            ""name"": ""General"",
            ""id"": ""5a64f1e9-ac3d-4d61-83be-f9db9cab8193"",
            ""actions"": [
                {
                    ""name"": ""SetZero"",
                    ""type"": ""Button"",
                    ""id"": ""8a9c5945-99b1-488a-a2de-0700fca9ccfa"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Save"",
                    ""type"": ""Button"",
                    ""id"": ""ddbb9d1b-b5ba-4419-bb8b-9d319756e7c7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""One Modifier"",
                    ""id"": ""51b56443-2e54-4ec5-8789-3b7ee536a236"",
                    ""path"": ""OneModifier"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SetZero"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""modifier"",
                    ""id"": ""dc807900-21d7-43c0-8d08-7389b3dc6daf"",
                    ""path"": ""<Keyboard>/leftCtrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""SetZero"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""binding"",
                    ""id"": ""540467d0-82c8-4480-ad58-4a67832ebf15"",
                    ""path"": ""<Keyboard>/0"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""SetZero"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""One Modifier"",
                    ""id"": ""7102f6bc-cdee-4841-b3f6-ef4a60d65844"",
                    ""path"": ""OneModifier"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Save"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""modifier"",
                    ""id"": ""f2dd367b-4a1f-4caa-9b8a-e25f125f6fe5"",
                    ""path"": ""<Keyboard>/leftCtrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Save"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""binding"",
                    ""id"": ""3b2726d5-1139-4516-857a-daa26dacb52d"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Save"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""Edit"",
            ""id"": ""453f31a4-71b6-496b-8a3a-335e7119de3c"",
            ""actions"": [
                {
                    ""name"": ""Up"",
                    ""type"": ""Button"",
                    ""id"": ""9b9eb5fe-f3c8-461c-a087-cd833aad50c1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Down"",
                    ""type"": ""Button"",
                    ""id"": ""161b0d47-dc7e-495b-ace2-bd356384eea7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Right"",
                    ""type"": ""Button"",
                    ""id"": ""661e0712-3caa-445f-9244-dc94ab371360"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Left"",
                    ""type"": ""Button"",
                    ""id"": ""9a57e969-0b80-4cdb-88cf-42a377ee5649"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Switch"",
                    ""type"": ""Button"",
                    ""id"": ""55f44301-231b-42da-a8be-c81a19c21fb8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Escape"",
                    ""type"": ""Button"",
                    ""id"": ""b9b395a2-627a-40bb-99db-61e033750212"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Delete"",
                    ""type"": ""Button"",
                    ""id"": ""a4fb32cb-3706-40dd-bff3-b50dc9cbc924"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""568d240c-d1c8-48f9-8081-9ea7e60abef9"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Up"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6f842b82-3bd8-4764-b9b7-2a1ef9cbab7c"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Down"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d6110de9-5305-4c25-ad7c-26d8258d252d"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""394d0632-df31-480c-b3ed-ff81633829b3"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""114450b6-ece5-442e-88f1-eba124c7d74f"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Switch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d014eeb1-2473-432a-87f9-244184846690"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Escape"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e36de542-f863-4d14-9caa-e2bf8e82aa37"",
                    ""path"": ""<Keyboard>/delete"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Delete"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Tools"",
            ""id"": ""c3c3243f-c60b-4c39-b165-260511da9c4b"",
            ""actions"": [
                {
                    ""name"": ""NormalNote"",
                    ""type"": ""Button"",
                    ""id"": ""d1ec1bf4-01bf-4334-a116-97e493d4024b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""BottomNote"",
                    ""type"": ""Button"",
                    ""id"": ""b569bcfe-538d-4b19-b6ba-d95292d456a8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Eraser"",
                    ""type"": ""Button"",
                    ""id"": ""207cfa21-646a-4cd1-a0c6-7dcc296d1ee9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Special"",
                    ""type"": ""Button"",
                    ""id"": ""d5c4bdfc-d6d5-4e66-bbe9-249167648ab8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Change"",
                    ""type"": ""Button"",
                    ""id"": ""41c4aed4-1510-4890-a112-702f213ff83d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""3db2a0a7-9a48-4ab0-8f3c-d3d492e36081"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""NormalNote"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a1072dea-55e9-4771-b0e6-c7ff84315e0c"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""BottomNote"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8d6207fd-07d0-49de-a682-a4e1dee4e5d0"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Eraser"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""682f5d40-23fd-4971-b59f-ac36888a50d4"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Special"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a4d5da2f-8164-469d-b262-ceb2cd2cf81f"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Change"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard&Mouse"",
            ""bindingGroup"": ""Keyboard&Mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Touch"",
            ""bindingGroup"": ""Touch"",
            ""devices"": [
                {
                    ""devicePath"": ""<Touchscreen>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Joystick"",
            ""bindingGroup"": ""Joystick"",
            ""devices"": [
                {
                    ""devicePath"": ""<Joystick>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""XR"",
            ""bindingGroup"": ""XR"",
            ""devices"": [
                {
                    ""devicePath"": ""<XRController>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // General
        m_General = asset.FindActionMap("General", throwIfNotFound: true);
        m_General_SetZero = m_General.FindAction("SetZero", throwIfNotFound: true);
        m_General_Save = m_General.FindAction("Save", throwIfNotFound: true);
        // Edit
        m_Edit = asset.FindActionMap("Edit", throwIfNotFound: true);
        m_Edit_Up = m_Edit.FindAction("Up", throwIfNotFound: true);
        m_Edit_Down = m_Edit.FindAction("Down", throwIfNotFound: true);
        m_Edit_Right = m_Edit.FindAction("Right", throwIfNotFound: true);
        m_Edit_Left = m_Edit.FindAction("Left", throwIfNotFound: true);
        m_Edit_Switch = m_Edit.FindAction("Switch", throwIfNotFound: true);
        m_Edit_Escape = m_Edit.FindAction("Escape", throwIfNotFound: true);
        m_Edit_Delete = m_Edit.FindAction("Delete", throwIfNotFound: true);
        // Tools
        m_Tools = asset.FindActionMap("Tools", throwIfNotFound: true);
        m_Tools_NormalNote = m_Tools.FindAction("NormalNote", throwIfNotFound: true);
        m_Tools_BottomNote = m_Tools.FindAction("BottomNote", throwIfNotFound: true);
        m_Tools_Eraser = m_Tools.FindAction("Eraser", throwIfNotFound: true);
        m_Tools_Special = m_Tools.FindAction("Special", throwIfNotFound: true);
        m_Tools_Change = m_Tools.FindAction("Change", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // General
    private readonly InputActionMap m_General;
    private IGeneralActions m_GeneralActionsCallbackInterface;
    private readonly InputAction m_General_SetZero;
    private readonly InputAction m_General_Save;
    public struct GeneralActions
    {
        private @PlayerInputSystem m_Wrapper;
        public GeneralActions(@PlayerInputSystem wrapper) { m_Wrapper = wrapper; }
        public InputAction @SetZero => m_Wrapper.m_General_SetZero;
        public InputAction @Save => m_Wrapper.m_General_Save;
        public InputActionMap Get() { return m_Wrapper.m_General; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GeneralActions set) { return set.Get(); }
        public void SetCallbacks(IGeneralActions instance)
        {
            if (m_Wrapper.m_GeneralActionsCallbackInterface != null)
            {
                @SetZero.started -= m_Wrapper.m_GeneralActionsCallbackInterface.OnSetZero;
                @SetZero.performed -= m_Wrapper.m_GeneralActionsCallbackInterface.OnSetZero;
                @SetZero.canceled -= m_Wrapper.m_GeneralActionsCallbackInterface.OnSetZero;
                @Save.started -= m_Wrapper.m_GeneralActionsCallbackInterface.OnSave;
                @Save.performed -= m_Wrapper.m_GeneralActionsCallbackInterface.OnSave;
                @Save.canceled -= m_Wrapper.m_GeneralActionsCallbackInterface.OnSave;
            }
            m_Wrapper.m_GeneralActionsCallbackInterface = instance;
            if (instance != null)
            {
                @SetZero.started += instance.OnSetZero;
                @SetZero.performed += instance.OnSetZero;
                @SetZero.canceled += instance.OnSetZero;
                @Save.started += instance.OnSave;
                @Save.performed += instance.OnSave;
                @Save.canceled += instance.OnSave;
            }
        }
    }
    public GeneralActions @General => new GeneralActions(this);

    // Edit
    private readonly InputActionMap m_Edit;
    private IEditActions m_EditActionsCallbackInterface;
    private readonly InputAction m_Edit_Up;
    private readonly InputAction m_Edit_Down;
    private readonly InputAction m_Edit_Right;
    private readonly InputAction m_Edit_Left;
    private readonly InputAction m_Edit_Switch;
    private readonly InputAction m_Edit_Escape;
    private readonly InputAction m_Edit_Delete;
    public struct EditActions
    {
        private @PlayerInputSystem m_Wrapper;
        public EditActions(@PlayerInputSystem wrapper) { m_Wrapper = wrapper; }
        public InputAction @Up => m_Wrapper.m_Edit_Up;
        public InputAction @Down => m_Wrapper.m_Edit_Down;
        public InputAction @Right => m_Wrapper.m_Edit_Right;
        public InputAction @Left => m_Wrapper.m_Edit_Left;
        public InputAction @Switch => m_Wrapper.m_Edit_Switch;
        public InputAction @Escape => m_Wrapper.m_Edit_Escape;
        public InputAction @Delete => m_Wrapper.m_Edit_Delete;
        public InputActionMap Get() { return m_Wrapper.m_Edit; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(EditActions set) { return set.Get(); }
        public void SetCallbacks(IEditActions instance)
        {
            if (m_Wrapper.m_EditActionsCallbackInterface != null)
            {
                @Up.started -= m_Wrapper.m_EditActionsCallbackInterface.OnUp;
                @Up.performed -= m_Wrapper.m_EditActionsCallbackInterface.OnUp;
                @Up.canceled -= m_Wrapper.m_EditActionsCallbackInterface.OnUp;
                @Down.started -= m_Wrapper.m_EditActionsCallbackInterface.OnDown;
                @Down.performed -= m_Wrapper.m_EditActionsCallbackInterface.OnDown;
                @Down.canceled -= m_Wrapper.m_EditActionsCallbackInterface.OnDown;
                @Right.started -= m_Wrapper.m_EditActionsCallbackInterface.OnRight;
                @Right.performed -= m_Wrapper.m_EditActionsCallbackInterface.OnRight;
                @Right.canceled -= m_Wrapper.m_EditActionsCallbackInterface.OnRight;
                @Left.started -= m_Wrapper.m_EditActionsCallbackInterface.OnLeft;
                @Left.performed -= m_Wrapper.m_EditActionsCallbackInterface.OnLeft;
                @Left.canceled -= m_Wrapper.m_EditActionsCallbackInterface.OnLeft;
                @Switch.started -= m_Wrapper.m_EditActionsCallbackInterface.OnSwitch;
                @Switch.performed -= m_Wrapper.m_EditActionsCallbackInterface.OnSwitch;
                @Switch.canceled -= m_Wrapper.m_EditActionsCallbackInterface.OnSwitch;
                @Escape.started -= m_Wrapper.m_EditActionsCallbackInterface.OnEscape;
                @Escape.performed -= m_Wrapper.m_EditActionsCallbackInterface.OnEscape;
                @Escape.canceled -= m_Wrapper.m_EditActionsCallbackInterface.OnEscape;
                @Delete.started -= m_Wrapper.m_EditActionsCallbackInterface.OnDelete;
                @Delete.performed -= m_Wrapper.m_EditActionsCallbackInterface.OnDelete;
                @Delete.canceled -= m_Wrapper.m_EditActionsCallbackInterface.OnDelete;
            }
            m_Wrapper.m_EditActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Up.started += instance.OnUp;
                @Up.performed += instance.OnUp;
                @Up.canceled += instance.OnUp;
                @Down.started += instance.OnDown;
                @Down.performed += instance.OnDown;
                @Down.canceled += instance.OnDown;
                @Right.started += instance.OnRight;
                @Right.performed += instance.OnRight;
                @Right.canceled += instance.OnRight;
                @Left.started += instance.OnLeft;
                @Left.performed += instance.OnLeft;
                @Left.canceled += instance.OnLeft;
                @Switch.started += instance.OnSwitch;
                @Switch.performed += instance.OnSwitch;
                @Switch.canceled += instance.OnSwitch;
                @Escape.started += instance.OnEscape;
                @Escape.performed += instance.OnEscape;
                @Escape.canceled += instance.OnEscape;
                @Delete.started += instance.OnDelete;
                @Delete.performed += instance.OnDelete;
                @Delete.canceled += instance.OnDelete;
            }
        }
    }
    public EditActions @Edit => new EditActions(this);

    // Tools
    private readonly InputActionMap m_Tools;
    private IToolsActions m_ToolsActionsCallbackInterface;
    private readonly InputAction m_Tools_NormalNote;
    private readonly InputAction m_Tools_BottomNote;
    private readonly InputAction m_Tools_Eraser;
    private readonly InputAction m_Tools_Special;
    private readonly InputAction m_Tools_Change;
    public struct ToolsActions
    {
        private @PlayerInputSystem m_Wrapper;
        public ToolsActions(@PlayerInputSystem wrapper) { m_Wrapper = wrapper; }
        public InputAction @NormalNote => m_Wrapper.m_Tools_NormalNote;
        public InputAction @BottomNote => m_Wrapper.m_Tools_BottomNote;
        public InputAction @Eraser => m_Wrapper.m_Tools_Eraser;
        public InputAction @Special => m_Wrapper.m_Tools_Special;
        public InputAction @Change => m_Wrapper.m_Tools_Change;
        public InputActionMap Get() { return m_Wrapper.m_Tools; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ToolsActions set) { return set.Get(); }
        public void SetCallbacks(IToolsActions instance)
        {
            if (m_Wrapper.m_ToolsActionsCallbackInterface != null)
            {
                @NormalNote.started -= m_Wrapper.m_ToolsActionsCallbackInterface.OnNormalNote;
                @NormalNote.performed -= m_Wrapper.m_ToolsActionsCallbackInterface.OnNormalNote;
                @NormalNote.canceled -= m_Wrapper.m_ToolsActionsCallbackInterface.OnNormalNote;
                @BottomNote.started -= m_Wrapper.m_ToolsActionsCallbackInterface.OnBottomNote;
                @BottomNote.performed -= m_Wrapper.m_ToolsActionsCallbackInterface.OnBottomNote;
                @BottomNote.canceled -= m_Wrapper.m_ToolsActionsCallbackInterface.OnBottomNote;
                @Eraser.started -= m_Wrapper.m_ToolsActionsCallbackInterface.OnEraser;
                @Eraser.performed -= m_Wrapper.m_ToolsActionsCallbackInterface.OnEraser;
                @Eraser.canceled -= m_Wrapper.m_ToolsActionsCallbackInterface.OnEraser;
                @Special.started -= m_Wrapper.m_ToolsActionsCallbackInterface.OnSpecial;
                @Special.performed -= m_Wrapper.m_ToolsActionsCallbackInterface.OnSpecial;
                @Special.canceled -= m_Wrapper.m_ToolsActionsCallbackInterface.OnSpecial;
                @Change.started -= m_Wrapper.m_ToolsActionsCallbackInterface.OnChange;
                @Change.performed -= m_Wrapper.m_ToolsActionsCallbackInterface.OnChange;
                @Change.canceled -= m_Wrapper.m_ToolsActionsCallbackInterface.OnChange;
            }
            m_Wrapper.m_ToolsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @NormalNote.started += instance.OnNormalNote;
                @NormalNote.performed += instance.OnNormalNote;
                @NormalNote.canceled += instance.OnNormalNote;
                @BottomNote.started += instance.OnBottomNote;
                @BottomNote.performed += instance.OnBottomNote;
                @BottomNote.canceled += instance.OnBottomNote;
                @Eraser.started += instance.OnEraser;
                @Eraser.performed += instance.OnEraser;
                @Eraser.canceled += instance.OnEraser;
                @Special.started += instance.OnSpecial;
                @Special.performed += instance.OnSpecial;
                @Special.canceled += instance.OnSpecial;
                @Change.started += instance.OnChange;
                @Change.performed += instance.OnChange;
                @Change.canceled += instance.OnChange;
            }
        }
    }
    public ToolsActions @Tools => new ToolsActions(this);
    private int m_KeyboardMouseSchemeIndex = -1;
    public InputControlScheme KeyboardMouseScheme
    {
        get
        {
            if (m_KeyboardMouseSchemeIndex == -1) m_KeyboardMouseSchemeIndex = asset.FindControlSchemeIndex("Keyboard&Mouse");
            return asset.controlSchemes[m_KeyboardMouseSchemeIndex];
        }
    }
    private int m_GamepadSchemeIndex = -1;
    public InputControlScheme GamepadScheme
    {
        get
        {
            if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
            return asset.controlSchemes[m_GamepadSchemeIndex];
        }
    }
    private int m_TouchSchemeIndex = -1;
    public InputControlScheme TouchScheme
    {
        get
        {
            if (m_TouchSchemeIndex == -1) m_TouchSchemeIndex = asset.FindControlSchemeIndex("Touch");
            return asset.controlSchemes[m_TouchSchemeIndex];
        }
    }
    private int m_JoystickSchemeIndex = -1;
    public InputControlScheme JoystickScheme
    {
        get
        {
            if (m_JoystickSchemeIndex == -1) m_JoystickSchemeIndex = asset.FindControlSchemeIndex("Joystick");
            return asset.controlSchemes[m_JoystickSchemeIndex];
        }
    }
    private int m_XRSchemeIndex = -1;
    public InputControlScheme XRScheme
    {
        get
        {
            if (m_XRSchemeIndex == -1) m_XRSchemeIndex = asset.FindControlSchemeIndex("XR");
            return asset.controlSchemes[m_XRSchemeIndex];
        }
    }
    public interface IGeneralActions
    {
        void OnSetZero(InputAction.CallbackContext context);
        void OnSave(InputAction.CallbackContext context);
    }
    public interface IEditActions
    {
        void OnUp(InputAction.CallbackContext context);
        void OnDown(InputAction.CallbackContext context);
        void OnRight(InputAction.CallbackContext context);
        void OnLeft(InputAction.CallbackContext context);
        void OnSwitch(InputAction.CallbackContext context);
        void OnEscape(InputAction.CallbackContext context);
        void OnDelete(InputAction.CallbackContext context);
    }
    public interface IToolsActions
    {
        void OnNormalNote(InputAction.CallbackContext context);
        void OnBottomNote(InputAction.CallbackContext context);
        void OnEraser(InputAction.CallbackContext context);
        void OnSpecial(InputAction.CallbackContext context);
        void OnChange(InputAction.CallbackContext context);
    }
}
